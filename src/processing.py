import streamlit as st
import pandas as pd
import altair as alt
import numpy as np

# --- 1. CONFIGURACI√ìN INICIAL Y PREPROCESAMIENTO DE DATOS ---

@st.cache_data
def load_data(file_path):
    """
    Carga, limpia y preprocesa el dataset de siniestros fatales.
    Utiliza @st.cache_data para evitar recargar y reprocesar la data en cada interacci√≥n.
    """
    try:
        # Cargar el archivo, saltando las 3 filas de metadatos del encabezado original.
        # Se usa 'latin1' para manejar la codificaci√≥n de caracteres especiales en espa√±ol.
        df = pd.read_csv(file_path, header=3, encoding="latin1")
    except FileNotFoundError:
        st.error(f"Error: El archivo '{file_path}' no se encontr√≥. Aseg√∫rate de que est√© en la misma carpeta.")
        return pd.DataFrame(), pd.DataFrame()

    # Mapeo para corregir nombres de columnas mal codificados
    column_name_map = {
        'C√É¬ìDIGO SINIESTRO': 'C√ìDIGO SINIESTRO',
        'C√É¬ìDIGO VEH√É¬çCULO': 'C√ìDIGO VEH√çCULO',
        'C√É¬ìDIGO PERSONA': 'C√ìDIGO PERSONA',
        'LUGAR ATENCI√É¬ìN LESIONADO': 'LUGAR ATENCI√ìN LESIONADO',
        'LUGAR DE DEFUNCI√É¬ìN': 'LUGAR DE DEFUNCI√ìN',
        'SITUACI√É¬ìN DE PERSONA': 'SITUACI√ìN DE PERSONA',
        'PA√É¬çS DE NACIONALIDAD': 'PA√çS DE NACIONALIDAD',
        'OTRO PA√É¬çS DE NACIONALIDAD': 'OTRO PA√çS DE NACIONALIDAD',
        'A√É¬ëO': 'A√ëO',
        'VEH√É¬çCULO': 'VEH√çCULO',
        'TIPO DE V√É¬çA': 'TIPO DE V√çA',
        'C√É¬ìDIGO DE CARRETERA': 'C√ìDIGO DE CARRETERA',
        '√Ç¬øSE SOMETI√É¬ì A DOSAJE ET√É¬çLICO CUALITATIVO?': 'DOSAJE ET√çLICO CUALITATIVO',
        'RESULTADO DEL DOSAJE ET√É¬çLICO CUALITATIVO': 'RESULTADO DOSAJE ET√çLICO CUALITATIVO',
        '√Ç¬øSE SOMETI√É¬ì A DOSAJE ET√É¬çLICO CUANTITATIVO?': 'DOSAJE ET√çLICO CUANTITATIVO',
    }
    df.rename(columns=column_name_map, inplace=True)
    
    # Limpiar espacios en los nombres de columna
    df.columns = df.columns.str.strip()

    # Funci√≥n gen√©rica para corregir codificaci√≥n de valores de texto
    def fix_encoding(text):
        if pd.isna(text):
            return text
        text = str(text)
        text = text.replace('√É‚Äò', '√ë').replace('√É\x93', '√ì').replace('√É\x8d', '√ç')
        text = text.replace('√É\x81', '√Å').replace('√É\x9a', '√ö').replace('√É\x89', '√â')
        text = text.replace('√É\xad', '√≠').replace('√É\x91', '√ë')
        text = text.replace('CA√É\x8dDA', 'CA√çDA').replace('PEAT√É\x93N', 'PEAT√ìN')
        text = text.replace('PER√É\x9a', 'PER√ö').replace('CAMI√É\x93N', 'CAMI√ìN')
        return text.strip()

    # Aplicar correcci√≥n a las principales columnas categ√≥ricas
    columns_to_clean = [
        'TIPO PERSONA', 'GRAVEDAD', 'MES', 'CLASE DE SINIESTRO', 'CAUSA',
        'CAUSA ESPECIFICA', 'TIPO DE V√çA', 'DEPARTAMENTO', 'PROVINCIA',
        'DISTRITO', 'SEXO', 'VEH√çCULO', 'ESTADO LICENCIA', 'CLASE_LICENCIA'
    ]
    for col in columns_to_clean:
        if col in df.columns:
            df[col] = df[col].apply(fix_encoding)

    # 2. Limpieza de 'EDAD' y Creaci√≥n de Rangos
    df['EDAD'] = df['EDAD'].replace('NO INDICA', np.nan)
    df['EDAD'] = pd.to_numeric(df['EDAD'], errors='coerce')

    bins = [0, 18, 30, 45, 60, 75, 120]
    labels = ['0-17', '18-29', '30-44', '45-59', '60-74', '75+']
    df['RANGO DE EDAD'] = pd.cut(df['EDAD'], bins=bins, labels=labels, right=False, include_lowest=True)

    # 3. Filtrado para el An√°lisis Principal: Personas Fallecidas
    df_fallecido = df[df['GRAVEDAD'] == 'FALLECIDO'].copy()

    # 4. Manejo contextual de NULLs en la data de fallecidos
    
    # RANGO DE EDAD: Imputar a 'EDAD DESCONOCIDA' (7.8% de NULLs)
    df_fallecido['RANGO DE EDAD'] = df_fallecido['RANGO DE EDAD'].cat.add_categories('EDAD DESCONOCIDA')
    df_fallecido['RANGO DE EDAD'] = df_fallecido['RANGO DE EDAD'].fillna('EDAD DESCONOCIDA')
    
    # VEH√çCULO: Eliminar 9 filas (0.1% de NULLs)
    df_fallecido.dropna(subset=['VEH√çCULO'], inplace=True)
    
    # DOSAJE y LICENCIA: Imputar a 'SIN INFORMACI√ìN' para an√°lisis futuros (no usados en estos 4 gr√°ficos)
    # df_fallecido['RESULTADO DOSAJE ET√çLICO CUALITATIVO'].fillna('SIN INFORMACI√ìN', inplace=True)
    # df_fallecido['POSEE LICENCIA'].fillna('SIN INFORMACI√ìN', inplace=True)

    return df, df_fallecido

# --- 2. CARGA DE DATOS Y DEFINICI√ìN DE VARIABLES ---

# Nombre del archivo CSV a cargar
FILE_PATH = "BBDD ONSV - PERSONAS 2021-2023.xlsx - PERSONAS INVOLUCRADAS.csv"
df_completo, df_fallecido = load_data(FILE_PATH)

if df_completo.empty or df_fallecido.empty:
    st.stop() # Detiene la ejecuci√≥n si hay un error de carga

# --- 3. FUNCIONES PARA GENERAR GR√ÅFICOS (ALTAIR) ---

def create_chart_1_tendencia(data):
    """Gr√°fico 1: Tendencia Anual de la Gravedad de los Siniestros"""
    chart_data = data.groupby(['A√ëO', 'GRAVEDAD']).size().reset_index(name='COUNT')
    
    # Define la paleta de colores para las categor√≠as de gravedad
    gravedad_colors = alt.Scale(
        domain=['FALLECIDO', 'LESIONADO', 'ILESO', 'NO SE CONOCE'],
        range=['#DC2626', '#FBBF24', '#10B981', '#6B7280']
    )

    chart = alt.Chart(chart_data).mark_bar().encode(
        x=alt.X('A√ëO:N', title='A√±o', axis=alt.Axis(labelAngle=0)),
        y=alt.Y('COUNT', title='Cantidad de Personas Involucradas'),
        color=alt.Color('GRAVEDAD', title='Gravedad', scale=gravedad_colors),
        tooltip=['A√ëO', 'GRAVEDAD', 'COUNT']
    ).properties(
        title='1. Personas Involucradas en Siniestros Fatales por Gravedad y A√±o (2021-2023)'
    ).interactive()
    
    return chart

def create_chart_2_top_departamentos(data):
    """Gr√°fico 2: Top 10 Departamentos con Mayor Cantidad de Fallecidos"""
    
    # Contar y seleccionar los 10 principales
    top_10_dptos = data['DEPARTAMENTO'].value_counts().nlargest(10).index.tolist()
    chart_data = data[data['DEPARTAMENTO'].isin(top_10_dptos)].groupby('DEPARTAMENTO').size().reset_index(name='FALLECIDOS')

    chart = alt.Chart(chart_data).mark_bar(color='#0EA5E9').encode(
        # Ordenar el eje Y por la cantidad de fallecidos (FALLECIDOS)
        y=alt.Y('DEPARTAMENTO', sort='-x', title='Departamento'),
        x=alt.X('FALLECIDOS', title='Cantidad de Fallecidos'),
        tooltip=['DEPARTAMENTO', 'FALLECIDOS'],
        # A√±adir texto con el valor exacto
        text=alt.Text('FALLECIDOS') 
    ).properties(
        title='2. Top 10 Departamentos con Mayor Cantidad de Fallecidos'
    )
    
    return chart

def create_chart_3_clase_siniestro(data):
    """Gr√°fico 3: Distribuci√≥n de Fallecidos por Clase de Siniestro (Causas m√°s letales)"""
    
    chart_data = data.groupby('CLASE DE SINIESTRO').size().reset_index(name='FALLECIDOS')
    
    chart = alt.Chart(chart_data).mark_bar(color='#14B8A6').encode(
        x=alt.X('CLASE DE SINIESTRO', sort='-y', title='Clase de Siniestro', axis=alt.Axis(labelAngle=-45)),
        y=alt.Y('FALLECIDOS', title='Cantidad de Fallecidos'),
        tooltip=['CLASE DE SINIESTRO', 'FALLECIDOS']
    ).properties(
        title='3. Fallecidos por Clase de Siniestro'
    )
    
    return chart

def create_chart_4_edad_sexo(data):
    """Gr√°fico 4: Distribuci√≥n de Fallecidos por Rango de Edad y Sexo"""
    
    chart_data = data.groupby(['RANGO DE EDAD', 'SEXO']).size().reset_index(name='FALLECIDOS')
    
    # Define un orden expl√≠cito para el eje X (incluyendo la categor√≠a NULL imputada)
    age_order = ['0-17', '18-29', '30-44', '45-59', '60-74', '75+', 'EDAD DESCONOCIDA']
    
    sexo_colors = alt.Scale(
        domain=['MASCULINO', 'FEMENINO', 'NO INDICA'],
        range=['#3B82F6', '#EC4899', '#A3A3A3'] # Azul, Rosa, Gris
    )

    chart = alt.Chart(chart_data).mark_bar().encode(
        x=alt.X('RANGO DE EDAD', sort=age_order, title='Rango de Edad', axis=alt.Axis(labelAngle=-45)),
        y=alt.Y('FALLECIDOS', title='Cantidad de Fallecidos'),
        color=alt.Color('SEXO', title='Sexo', scale=sexo_colors),
        column=alt.Column('SEXO', header=alt.Header(titleOrient="bottom", labelOrient="bottom"), title=''),
        tooltip=['RANGO DE EDAD', 'SEXO', 'FALLECIDOS']
    ).properties(
        title='4. Fallecidos por Rango de Edad y Sexo'
    ).resolve_scale(
        y='shared' # Compartir el eje Y para que la comparaci√≥n sea directa
    )
    
    return chart

# --- 4. STREAMLIT UI ---

st.set_page_config(layout="wide", page_title="An√°lisis de Fatalidades Viales")

st.title("üõ£Ô∏è An√°lisis de Personas Fallecidas en Siniestros de Tr√°nsito (2021-2023)")
st.caption("Fuente de datos: ONSV (preliminar)")

st.sidebar.header("Filtros Globales de la Data")
# Selector de A√±o (Aplica al Gr√°fico 2, 3 y 4)
years = sorted(df_fallecido['A√ëO'].unique())
selected_years = st.sidebar.multiselect(
    "Selecciona A√±o(s) para los gr√°ficos 2, 3 y 4:",
    options=years,
    default=years
)

# Aplicar filtro de a√±o a la data de fallecidos
df_filtered = df_fallecido[df_fallecido['A√ëO'].isin(selected_years)]


# --- Presentaci√≥n de M√©tricas Clave ---
col1, col2, col3 = st.columns(3)

col1.metric("Total de Registros de Siniestros", f"{len(df_completo.drop_duplicates(subset=['C√ìDIGO SINIESTRO'])):,}")
col2.metric("Personas Fallecidas (2021-2023)", f"{len(df_fallecido):,}")
col3.metric("Fallecidos en la Selecci√≥n Actual", f"{len(df_filtered):,}")

st.markdown("---")


# --- Presentaci√≥n de Gr√°ficos ---

# Gr√°fico 1 (Usa la data completa, no la filtrada por sidebar, para ver la tendencia)
st.altair_chart(create_chart_1_tendencia(df_completo), use_container_width=True)

st.markdown("---")

# Gr√°fico 2
st.altair_chart(create_chart_2_top_departamentos(df_filtered), use_container_width=True)

st.markdown("---")

# Gr√°fico 3
st.altair_chart(create_chart_3_clase_siniestro(df_filtered), use_container_width=True)

st.markdown("---")

# Gr√°fico 4
st.altair_chart(create_chart_4_edad_sexo(df_filtered), use_container_width=True)

st.markdown("---")

st.subheader("Informaci√≥n Adicional del An√°lisis")
st.info(
    """
    **Manejo de Valores Nulos:**
    Para el an√°lisis de la edad, las categor√≠as 'NO INDICA' (aproximadamente 7.8% de los fallecidos)
    fueron imputadas a la categor√≠a **'EDAD DESCONOCIDA'** para asegurar que el total de fallecidos
    se mantenga en los gr√°ficos de distribuci√≥n, revelando la proporci√≥n de datos faltantes.
    Otras columnas con alta proporci√≥n de NULLs (ej. Dosaje Et√≠lico, Licencia)
    indican posibles vac√≠os en los procedimientos de recolecci√≥n de datos o aplicabilidad
    del campo (ej. peatones sin licencia).
    """
)

# Opcional: Mostrar el DataFrame filtrado para inspecci√≥n
if st.checkbox("Mostrar DataFrame de Fallecidos filtrado"):
    st.dataframe(df_filtered)

